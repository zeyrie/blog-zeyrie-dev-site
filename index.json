[{"content":"At this year\u0026rsquo;s WWDC, Apple released a major change to the design system: Liquid Glass.\nSwiftUI Session # Notes from the group session regarding SwiftUI:\nUse color sparingly, as the new design system is intended to be mostly monochrome. Overusing colors can be very distracting and attract users\u0026rsquo; attention inappropriately.\nFor use cases where a property is used only within a container or a specific view, make use of Container Values \u0026amp; Preferences for restricted properties.\nDesigns are in beta. Apple has adapted Glass into all Apple apps because they want feedback to improve the design before the beta release.\nAdvice on Custom Tab Bars:\nUse the standard tab bar as much as possible. Apple has introduced many new APIs for tab bar design to make it better. If building a custom tab bar, make use of the new glass effects, container, and safe area bar APIs to build the tab bar and make it comply with the design system. File feedback if you have mandatory requirements for tab bar functionality to get it into the design system or framework. Apple can\u0026rsquo;t anticipate every use case, so provide your use cases and needs as feedback for them to design and improve the system.\nUnit Testing SwiftUI Views:\nMove logic from SwiftUI to models to test the logic, so you don\u0026rsquo;t test the UI itself in unit tests. Lazy VStack without Performance Problems for Thousands of Image Loadings (Overall Performance Guide):\nUse Swift concurrency. Start coding with single-threaded code, then introduce concurrency (SwiftUI concurrency). Use Swift Instruments for performance issues and debugging expenses. Tip: Set a background color to your images and see if the image is actually flickering during app usage, which means the images are invalidating due to some issue. Use this technique to debug. Date picker doesn\u0026rsquo;t respect Dynamic Type. This is a known issue—file feedback, as there\u0026rsquo;s no workaround for now.\nCommon Anti-patterns in SwiftUI:\nDon\u0026rsquo;t use if statements to apply modifiers to views. These are very performance-inefficient. Every time the conditional value changes, the view is forced to invalidate because changing view modifiers entirely causes new views to be redrawn. It\u0026rsquo;s recommended to use ternary operators within the modifier parameters to handle different cases. Apple has supported ternary operators for most view modifiers. If any modifier doesn\u0026rsquo;t have this option, file feedback to get it supported. (Additional resource on this topic) Don\u0026rsquo;t use if statements to switch between containers/navigation-specific views (split navigation, sidebar column, detail views). Instead, have the if statements within the containers like NavigationStack to handle different use cases. For SwiftUI accessibility representation, custom styles \u0026amp; controls, and hidden views in the accessibility system, use more representable APIs to generate more semantic meaning for views. Standard UI is accessible by itself—use these techniques for custom views. State \u0026amp; State Maintenance: Be aware of how you manage state when conditionally switching views, as this can cause performance issues. Best Practices for App Architecture \u0026amp; Other Patterns:\nNot many comments on architecture were provided. Lean into Observable, which is compatible with UIKit from iOS 26 onwards. Observables:\nLook into Swift forums for more information. Make sure observables are not holding large structs. Keep in mind the granularity of each observable to avoid unwanted behaviors. Debug Techniques:\nUse profiling instruments. Use breakpoints and conditional breakpoints. Apply colors to view backgrounds to debug SwiftUI views better. Use print debugging in initializers and check lifecycles of views to see the flow and question the flow. Comment out code to find problems and fix broken points. let _ = Self._printChanges() provides insight when a view\u0026rsquo;s state changes or gets redrawn/invalidated. This is a private API that can be used within a view\u0026rsquo;s body. Set breakpoints to play system sounds and continue execution without stopping. This helps identify flow changes by playing a sound when hitting a breakpoint without interrupting app execution. Foundation Model # Simulator testing for the model requires the host machine to run macOS Tahoe for simulators.\nThere are rate limits when the app is in the background, but no limits in the foreground. However, if the system is under heavy load due to other processes outside the application, the system could limit API usage when device performance might be compromised.\nFoundation Model language support includes all languages supported by Apple Intelligence.\nGet the language code from the locale, and you can specify it using the supported languages API property to check for availability.\nFor context generation in other languages, it\u0026rsquo;s advised to put instructions in English and provide user input in whatever language the user wants. This gives the best outputs.\nFor advanced usage, Apple has a training tool in Foundation Model to train the model with custom data. Each adapter can be trained, but when Apple provides updates to the models, you should retrain the model. This is for very advanced users.\nApple provides updates to Foundation Model only through OS updates.\n","externalUrl":null,"permalink":"/series/wwdc/wwdc25/","section":"Series","summary":"\u003cp\u003eAt this year\u0026rsquo;s WWDC, Apple released a major change to the design system: Liquid Glass.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003eSwiftUI Session \n    \u003cdiv id=\"swiftui-session\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#swiftui-session\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eNotes from the group session regarding SwiftUI:\u003c/p\u003e","title":"WWDC Group Session Notes","type":"series"},{"content":"This website uses Umami to capture anonymized metrics about the page views it receives. Umami is an open-source, privacy-focused analytics service which strives to provide helpful metrics without capturing any personally-identifiable information about visitors. Umami Analytics is hosted in a private server, hence it is not available to any corporations or third-party actors.\nVery little information about you is captured, none of it personally identifiable I don’t see any IP addresses for visitors! No cookies or browser fingerprinting are used for tracking You are not tracked across multiple sites like with Google Analytics The analytics data isn’t used by or sold to a third party I am also not trying to obscure the fact that I am using site analytics with tricks like proxying or CNAME facades. I want you to have a choice about whether you share the basic information that this analytics platform captures.\nTake a look for yourself! # If you’d like to see the exact information that I see, check out the public analytics dashboard.\nWhy use analytics? # I am very interested in improving the content and organization of this site to ensure that people get the most value out of it. Page analytics help me to understand which topics are more interesting to visitors so that I can make further investments in those areas. It also helps me to learn when I am receiving traffic from another site!\nIf you’re interested in helping me make this site better, please consider disabling tracker blocking for this domain!\nAny questions or concerns? # Please send me an e-mail at abilash@zeyrie.dev if you have any concerns about the use of this service, I’d be happy to hear from you.\n","date":"14 Jun 2025","externalUrl":null,"permalink":"/privacy/","section":"Welcome to Zeyrie's blog","summary":"\u003cp\u003eThis website uses Umami to capture anonymized metrics about the page views it receives. Umami is an open-source, privacy-focused analytics service which strives to provide helpful metrics without capturing any personally-identifiable information about visitors. Umami Analytics is hosted in a private server, hence it is not available to any corporations or third-party actors.\u003c/p\u003e","title":"Privacy Policy","type":"page"},{"content":" A nomad developer on the journey to explore the evolving tech landscape. From iOS apps to terminal wizardry, documenting the adventure one commit at a time. ","date":"14 Jun 2025","externalUrl":null,"permalink":"/","section":"Welcome to Zeyrie's blog","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  A nomad developer on the journey to explore the evolving tech landscape.\nFrom iOS apps to terminal wizardry, documenting the adventure one commit at a time.\n\u003c/div\u003e","title":"Welcome to Zeyrie's blog","type":"page"},{"content":"","date":"14 Jun 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Image by freepik Currently working on some improvements, until then look around. Maybe visit my feeds to learn something interesting about my work or me.\n","date":"14 Jun 2025","externalUrl":null,"permalink":"/posts/maintaince/","section":"Posts","summary":"\u003cfigure\u003e\n        \u003cimg\n          class=\"my-0 rounded-md\"\n          srcset=\"\n          /posts/maintaince/featured_hu_41c838f457082b17.jpg 330w,\n          /posts/maintaince/featured_hu_b6e0a279cdb8ebea.jpg 660w,\n          /posts/maintaince/featured_hu_f06c27cdbad33b80.jpg 1024w,\n          /posts/maintaince/featured_hu_fb987d676bf30529.jpg 2x\"\n          src=\"/posts/maintaince/featured_hu_b6e0a279cdb8ebea.jpg\"\n          data-zoom-src=\"/posts/maintaince/featured_hu_fb987d676bf30529.jpg\"\n          alt=\"Abstract purple artwork\"\n        /\u003e\n  \u003cfigcaption\u003e\u003ca href=\"https://www.freepik.com/free-vector/hand-drawn-construction-background_1583775.htm#fromView=keyword\u0026page=1\u0026position=5\u0026uuid=66d005ba-f955-4e80-843b-4ff976bbb5d6\u0026query=Traffic+Cone+Maintenance\"\u003eImage by freepik\u003c/a\u003e\u003c/figcaption\u003e\n  \n  \u003c/figure\u003e\n\u003cp\u003eCurrently working on some improvements, until then look around. Maybe visit \u003ca href=\"https://feeds.zeyrie.dev\" target=\"_blank\"\u003emy feeds\u003c/a\u003e to learn something interesting about my work or me.\u003c/p\u003e","title":"Under Maintenance","type":"posts"},{"content":" From college graduate to iOS developer, with a few detours through Arch Linux ricing and terminal wizardry along the way. The Professional Path Hey there! I\u0026rsquo;m Abilash, and like many developers, my journey into tech wasn\u0026rsquo;t exactly a straight line. iOS development became my first professional gig right out of college — talk about jumping into the deep end!\nThese days, I\u0026rsquo;m working on Bigin by Zoho CRM, where I get to play with Apple\u0026rsquo;s latest frameworks and occasionally wonder why SwiftUI does what it does. There\u0026rsquo;s something satisfying about building mobile experiences that people actually use, even when Xcode decides to have one of its \u0026ldquo;moments.\u0026rdquo;\nThe Great Linux Adventure But here\u0026rsquo;s where it gets interesting. During COVID (remember those days?), while everyone was learning sourdough, I discovered Pop OS. What started as casual curiosity quickly spiraled into a full-blown Linux obsession. Before I knew it, I was rice\u0026rsquo;ing Arch Linux from scratch with Qtile, tweaking every pixel until it was just right.\nThat\u0026rsquo;s when I fell hard for Vim and later Emacs — because why choose sides when you can appreciate both? I spent countless hours crafting the perfect terminal workflows, configuring Alacritty (recently switched to Ghostty, and wow, what a difference), and generally living my best terminal life.\nPlot twist: Then I joined my current company as an iOS developer and got \"trapped\" on macOS. The irony is not lost on me — a Linux enthusiast working on the most locked-down platform Apple makes. But hey, at least I still have my terminal! 😅 Always Learning, Always Curious My current learning queue is an eclectic mix. I stumbled upon Zig while surfing the internet one day and got completely fascinated by its approach to systems programming. Learned the language, loved the concepts, but haven\u0026rsquo;t quite found the right hobby project to sink my teeth into yet. Still actively looking though!\nGolang entered my life when I wanted to dive deeper into REST APIs and build some terminal tools. There\u0026rsquo;s something refreshing about Go\u0026rsquo;s simplicity after dealing with the complexity of some other languages.\nAnd then there\u0026rsquo;s Rust — the language I really, really want to learn properly. I\u0026rsquo;ve been circling around it for a while now, intimidated by the borrow checker but excited by everything I hear about memory safety and performance. It\u0026rsquo;s definitely next on my serious learning list.\nBeyond the Code When I\u0026rsquo;m not debugging or configuring dotfiles, you might find me with a camera in hand. I have a soft spot for nature photography and I\u0026rsquo;m particularly drawn to macro photography — there\u0026rsquo;s something mesmerizing about capturing the tiny worlds that exist right under our noses. It\u0026rsquo;s like debugging, but prettier and with better lighting.\nI also game occasionally when I need to completely disconnect from code. Sometimes your brain just needs to focus on something that isn\u0026rsquo;t a compile error, you know?\nWhy This Blog Exists This blog started as a simple need: I wanted a place to journal about tech stuff and keep track of the things I learn. As someone who\u0026rsquo;s constantly exploring new languages, tools, and concepts, I found myself forgetting the details of things I\u0026rsquo;d figured out months ago.\nConsider this my external brain — a place where I can dump interesting discoveries, document my learning process, and maybe help future me (or future you) solve the same problems I\u0026rsquo;m wrestling with today.\nThe Setup Corner 🛠️ Current Setup Primary OS: macOS (for work)\nHeart belongs to: Arch Linux + Qtile\nTerminal: Ghostty (recently switched from Alacritty)\nEditors: Vim \u0026 Emacs (why choose?) Languages: Swift, learning Go\nCurious about: Zig \u0026 Rust\nPhotography: Nature \u0026 Macro\nDotfiles: Obsessively maintained Let\u0026rsquo;s Connect If any of this resonates with you — whether you\u0026rsquo;re fellow iOS developer, a Linux enthusiast, someone learning the same languages, or just someone who appreciates a good terminal setup — I\u0026rsquo;d love to connect. Drop me a line, share your own learning journey, or let\u0026rsquo;s debate the merits of different text editors (I promise to keep it friendly).\nAfter all, the best part of this whole developer journey isn\u0026rsquo;t just the code we write, but the people we meet and learn from along the way.\nWant to chat about code, Linux ricing, or photography?\nI'm always up for interesting conversations!\n","externalUrl":null,"permalink":"/about/","section":"Welcome to Zeyrie's blog","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  From college graduate to iOS developer, with a few detours through Arch Linux ricing and terminal wizardry along the way.\n\u003c/div\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eThe Professional Path \n    \u003cdiv id=\"the-professional-path\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\u003cp\u003eHey there! I\u0026rsquo;m Abilash, and like many developers, my journey into tech wasn\u0026rsquo;t exactly a straight line. iOS development became my first professional gig right out of college — talk about jumping into the deep end!\u003c/p\u003e","title":"About Me","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Coverage and insights from Apple\u0026rsquo;s Worldwide Developers Conference events.\n","externalUrl":null,"permalink":"/series/wwdc/","section":"Series","summary":"\u003cp\u003eCoverage and insights from Apple\u0026rsquo;s Worldwide Developers Conference events.\u003c/p\u003e","title":"WWDC","type":"page"}]